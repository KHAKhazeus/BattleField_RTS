// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rts_exchange.proto

#include "rts_exchange.pb.h"
#include "rts_exchange.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* Exchange_method_names[] = {
  "/Exchange/OneExchange",
};

std::unique_ptr< Exchange::Stub> Exchange::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Exchange::Stub> stub(new Exchange::Stub(channel));
  return stub;
}

Exchange::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_OneExchange_(Exchange_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Exchange::Stub::OneExchange(::grpc::ClientContext* context, const ::GameMessageSet& request, ::GameMessageSet* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OneExchange_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::GameMessageSet>* Exchange::Stub::AsyncOneExchangeRaw(::grpc::ClientContext* context, const ::GameMessageSet& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GameMessageSet>::Create(channel_.get(), cq, rpcmethod_OneExchange_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GameMessageSet>* Exchange::Stub::PrepareAsyncOneExchangeRaw(::grpc::ClientContext* context, const ::GameMessageSet& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GameMessageSet>::Create(channel_.get(), cq, rpcmethod_OneExchange_, context, request, false);
}

Exchange::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Exchange_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Exchange::Service, ::GameMessageSet, ::GameMessageSet>(
          std::mem_fn(&Exchange::Service::OneExchange), this)));
}

Exchange::Service::~Service() {
}

::grpc::Status Exchange::Service::OneExchange(::grpc::ServerContext* context, const ::GameMessageSet* request, ::GameMessageSet* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


